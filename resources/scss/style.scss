@use 'sass:math';

@function em($px, $current: 16) {
	@return math.div($px, $current) + em;
}

@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}

%transition {
	transition: all 0.6s ease 0s;
}

$bgcbody: #181818;
$primary-light: #8abdff;
$primary: #6d5dfc;
$primary-dark: #5b0eeb;
$clickByTouchColor0: rgba(0, 0, 0, 0);

$zIndex0: 0;
$zIndex1: 1;
$zIndex2: 2;
$zIndex3: 3;

$zIndex4: 4;
$zIndex5: 5;

$minWidth: 300;
$maxWidth: 1920;
$maxWidthContainer: 1170;
$containerPadding: 30;

$containerWidth: $maxWidthContainer + $containerPadding;

@mixin adaptiveValue(
	$property,
	$startSize,
	$minSize,
	$widthTo: $minWidth,
	$widthFrom: $containerWidth,
	$keepSize: 0
) {
	@if ($widthFrom >= $containerWidth or $widthFrom == 0) {
		$widthFrom: $containerWidth;
	}
	@if ($widthTo <= $minWidth) {
		$widthTo: $minWidth;
	}
	@if ($minSize <= 0) {
		$minSize: 0.0001;
	}
	@if ($startSize <= 0) {
		$startSize: 0.0001;
	}
	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Получение значения свойства
	$propertyValue: calc(
			#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div(
					$widthFrom,
					16
				) - math.div($widthTo, 16)}
	);

	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		#{$property}: $propertyValue;
	}

	@if $widthFrom ==
			$containerWidth or
			$widthFrom ==
			$maxWidth or
			$keepSize ==
			1 or
			$keepSize ==
			2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}

	@if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}

@import "./_draganddrop";
@import "./_dropzone";
@import "_notifications";